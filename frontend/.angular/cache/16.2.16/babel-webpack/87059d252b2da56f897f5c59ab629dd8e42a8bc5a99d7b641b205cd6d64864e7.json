{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthService {\n  constructor(http) {\n    this.http = http;\n    this.API_URL = 'http://localhost:8080/api';\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.loadUserFromStorage();\n  }\n  login(username, password) {\n    return this.http.post(`${this.API_URL}/auth/login`, {\n      username,\n      password\n    }).pipe(tap(response => {\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('user', JSON.stringify(response.user));\n      this.currentUserSubject.next(response.user);\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.currentUserSubject.next(null);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n  isAdmin() {\n    const user = this.currentUserSubject.value;\n    return user?.role === 'ADMIN';\n  }\n  loadUserFromStorage() {\n    const userStr = localStorage.getItem('user');\n    if (userStr) {\n      const user = JSON.parse(userStr);\n      this.currentUserSubject.next(user);\n    }\n  }\n  getAuthHeaders() {\n    const token = this.getToken();\n    return new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    });\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthService };","map":{"version":3,"names":["HttpHeaders","BehaviorSubject","tap","AuthService","constructor","http","API_URL","currentUserSubject","currentUser$","asObservable","loadUserFromStorage","login","username","password","post","pipe","response","localStorage","setItem","token","JSON","stringify","user","next","logout","removeItem","getToken","getItem","isAuthenticated","isAdmin","value","role","userStr","parse","getAuthHeaders","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\GIT\\GitHub\\IGA\\frontend\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { User, AuthResponse } from '../models/models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private readonly API_URL = 'http://localhost:8080/api';\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.loadUserFromStorage();\r\n  }\r\n\r\n  login(username: string, password: string): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.API_URL}/auth/login`, {\r\n      username,\r\n      password\r\n    }).pipe(\r\n      tap(response => {\r\n        localStorage.setItem('token', response.token);\r\n        localStorage.setItem('user', JSON.stringify(response.user));\r\n        this.currentUserSubject.next(response.user);\r\n      })\r\n    );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    this.currentUserSubject.next(null);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!this.getToken();\r\n  }\r\n\r\n  isAdmin(): boolean {\r\n    const user = this.currentUserSubject.value;\r\n    return user?.role === 'ADMIN';\r\n  }\r\n\r\n  private loadUserFromStorage(): void {\r\n    const userStr = localStorage.getItem('user');\r\n    if (userStr) {\r\n      const user = JSON.parse(userStr);\r\n      this.currentUserSubject.next(user);\r\n    }\r\n  }\r\n\r\n  getAuthHeaders(): HttpHeaders {\r\n    const token = this.getToken();\r\n    return new HttpHeaders({\r\n      'Authorization': `Bearer ${token}`,\r\n      'Content-Type': 'application/json'\r\n    });\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,eAAe,QAAQ,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAGpC,MAGaC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJP,KAAAC,OAAO,GAAG,2BAA2B;IAC9C,KAAAC,kBAAkB,GAAG,IAAIN,eAAe,CAAc,IAAI,CAAC;IAC5D,KAAAO,YAAY,GAAG,IAAI,CAACD,kBAAkB,CAACE,YAAY,EAAE;IAG1D,IAAI,CAACC,mBAAmB,EAAE;EAC5B;EAEAC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAe,GAAG,IAAI,CAACR,OAAO,aAAa,EAAE;MAChEM,QAAQ;MACRC;KACD,CAAC,CAACE,IAAI,CACLb,GAAG,CAACc,QAAQ,IAAG;MACbC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACG,KAAK,CAAC;MAC7CF,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEE,IAAI,CAACC,SAAS,CAACL,QAAQ,CAACM,IAAI,CAAC,CAAC;MAC3D,IAAI,CAACf,kBAAkB,CAACgB,IAAI,CAACP,QAAQ,CAACM,IAAI,CAAC;IAC7C,CAAC,CAAC,CACH;EACH;EAEAE,MAAMA,CAAA;IACJP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,CAAClB,kBAAkB,CAACgB,IAAI,CAAC,IAAI,CAAC;EACpC;EAEAG,QAAQA,CAAA;IACN,OAAOT,YAAY,CAACU,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAC,eAAeA,CAAA;IACb,OAAO,CAAC,CAAC,IAAI,CAACF,QAAQ,EAAE;EAC1B;EAEAG,OAAOA,CAAA;IACL,MAAMP,IAAI,GAAG,IAAI,CAACf,kBAAkB,CAACuB,KAAK;IAC1C,OAAOR,IAAI,EAAES,IAAI,KAAK,OAAO;EAC/B;EAEQrB,mBAAmBA,CAAA;IACzB,MAAMsB,OAAO,GAAGf,YAAY,CAACU,OAAO,CAAC,MAAM,CAAC;IAC5C,IAAIK,OAAO,EAAE;MACX,MAAMV,IAAI,GAAGF,IAAI,CAACa,KAAK,CAACD,OAAO,CAAC;MAChC,IAAI,CAACzB,kBAAkB,CAACgB,IAAI,CAACD,IAAI,CAAC;;EAEtC;EAEAY,cAAcA,CAAA;IACZ,MAAMf,KAAK,GAAG,IAAI,CAACO,QAAQ,EAAE;IAC7B,OAAO,IAAI1B,WAAW,CAAC;MACrB,eAAe,EAAE,UAAUmB,KAAK,EAAE;MAClC,cAAc,EAAE;KACjB,CAAC;EACJ;;;uBAvDWhB,WAAW,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXnC,WAAW;MAAAoC,OAAA,EAAXpC,WAAW,CAAAqC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA;;SAEPtC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}