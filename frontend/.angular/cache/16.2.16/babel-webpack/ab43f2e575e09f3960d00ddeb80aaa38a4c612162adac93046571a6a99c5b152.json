{"ast":null,"code":"import { Observable, of } from 'rxjs';\nimport { delay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthService {\n  constructor(http) {\n    this.http = http;\n    this.isLoggedIn = false;\n    this.apiUrl = 'http://localhost:3000/api'; // Ajustez selon votre backend\n  }\n\n  login(username, password) {\n    // Simulation d'une connexion pour le développement\n    if (username === 'admin' && password === 'password') {\n      this.isLoggedIn = true;\n      localStorage.setItem('token', 'fake-jwt-token');\n      return of({\n        success: true,\n        token: 'fake-jwt-token'\n      }).pipe(delay(1000));\n    } else {\n      return new Observable(observer => {\n        setTimeout(() => {\n          observer.error({\n            error: 'Invalid credentials'\n          });\n        }, 1000);\n      });\n    }\n    // Pour une vraie API, utilisez ceci :\n    // return this.http.post(`${this.apiUrl}/auth/login`, { username, password });\n  }\n\n  logout() {\n    this.isLoggedIn = false;\n    localStorage.removeItem('token');\n  }\n  isAuthenticated() {\n    return this.isLoggedIn || !!localStorage.getItem('token');\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthService };","map":{"version":3,"names":["Observable","of","delay","AuthService","constructor","http","isLoggedIn","apiUrl","login","username","password","localStorage","setItem","success","token","pipe","observer","setTimeout","error","logout","removeItem","isAuthenticated","getItem","getToken","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\GIT\\GitHub\\IGA\\frontend\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { delay } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private isLoggedIn = false;\r\n  private apiUrl = 'http://localhost:3000/api'; // Ajustez selon votre backend\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(username: string, password: string): Observable<any> {\r\n    // Simulation d'une connexion pour le développement\r\n    if (username === 'admin' && password === 'password') {\r\n      this.isLoggedIn = true;\r\n      localStorage.setItem('token', 'fake-jwt-token');\r\n      return of({ success: true, token: 'fake-jwt-token' }).pipe(delay(1000));\r\n    } else {\r\n      return new Observable(observer => {\r\n        setTimeout(() => {\r\n          observer.error({ error: 'Invalid credentials' });\r\n        }, 1000);\r\n      });\r\n    }\r\n\r\n    // Pour une vraie API, utilisez ceci :\r\n    // return this.http.post(`${this.apiUrl}/auth/login`, { username, password });\r\n  }\r\n\r\n  logout(): void {\r\n    this.isLoggedIn = false;\r\n    localStorage.removeItem('token');\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return this.isLoggedIn || !!localStorage.getItem('token');\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,UAAU,EAAEC,EAAE,QAAQ,MAAM;AACrC,SAASC,KAAK,QAAQ,gBAAgB;;;AAEtC,MAGaC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,UAAU,GAAG,KAAK;IAClB,KAAAC,MAAM,GAAG,2BAA2B,CAAC,CAAC;EAEP;;EAEvCC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC;IACA,IAAID,QAAQ,KAAK,OAAO,IAAIC,QAAQ,KAAK,UAAU,EAAE;MACnD,IAAI,CAACJ,UAAU,GAAG,IAAI;MACtBK,YAAY,CAACC,OAAO,CAAC,OAAO,EAAE,gBAAgB,CAAC;MAC/C,OAAOX,EAAE,CAAC;QAAEY,OAAO,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAgB,CAAE,CAAC,CAACC,IAAI,CAACb,KAAK,CAAC,IAAI,CAAC,CAAC;KACxE,MAAM;MACL,OAAO,IAAIF,UAAU,CAACgB,QAAQ,IAAG;QAC/BC,UAAU,CAAC,MAAK;UACdD,QAAQ,CAACE,KAAK,CAAC;YAAEA,KAAK,EAAE;UAAqB,CAAE,CAAC;QAClD,CAAC,EAAE,IAAI,CAAC;MACV,CAAC,CAAC;;IAGJ;IACA;EACF;;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACb,UAAU,GAAG,KAAK;IACvBK,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;EAClC;EAEAC,eAAeA,CAAA;IACb,OAAO,IAAI,CAACf,UAAU,IAAI,CAAC,CAACK,YAAY,CAACW,OAAO,CAAC,OAAO,CAAC;EAC3D;EAEAC,QAAQA,CAAA;IACN,OAAOZ,YAAY,CAACW,OAAO,CAAC,OAAO,CAAC;EACtC;;;uBAnCWnB,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXxB,WAAW;MAAAyB,OAAA,EAAXzB,WAAW,CAAA0B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA;;SAEP3B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}